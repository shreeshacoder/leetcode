/* Question: Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]

Link: https://leetcode.com/problems/binary-tree-paths/description/

*/

//Solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    List<String> res;
    public void treePathUtil(TreeNode root, String current){
        if(root == null)    
            return;
        current += "->"+String.valueOf(root.val);
        if(root.left == null && root.right == null)
            res.add(current);
        else{
            treePathUtil(root.left, current);
            treePathUtil(root.right, current);
        }
        //delete the exiting node value
        current = current.substring(0, current.lastIndexOf('-'));
        
    }
    
    public List<String> binaryTreePaths(TreeNode root) {
        res = new ArrayList<String>();
        if(root == null)
            return res;
        //if there is only root node
        String current = new String(String.valueOf(root.val));
        if(root.left == null && root.right == null){
            res.add(current);
        }
        treePathUtil(root.left,current);
        treePathUtil(root.right,current);
        return res;
    }
}
