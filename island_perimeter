/* Question: You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. 
Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is 
exactly one island (i.e., one or more connected land cells). The island doesn't have "lakes" (water inside that isn't connected
to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100.
Determine the perimeter of the island.

Link: https://leetcode.com/problems/island-perimeter/description/

*/

//Solution
//My solution has a runtime of 262ms. I admit its not that great. I came across a much better solution, but I wont be posting that here.

class Solution {
    
    public int calculate(int grid[][], int i, int j, int row, int column) {
        int result = 0;
        if((i-1>=0 && (grid[i-1][j] == 0)) || i-1<0)
            result++;
        if((i+1<row && (grid[i+1][j] == 0)) || i+1>=row)
            result++;
        if((j-1>=0 && (grid[i][j-1] == 0)) || j-1<0)
            result++;
        if((j+1<column && (grid[i][j+1] == 0)) || j+1>=column)
            result++;
        return result;
    }
    
    public int islandPerimeter(int[][] grid) {
int i, j, result =0, row = grid.length, column = grid[0].length;
        
        for(i = 0; i<row; i++)
            for(j = 0;j<column; j++)
                if(grid[i][j] == 1)
                result += calculate(grid, i, j, row, column);
        return result;
    }
}
