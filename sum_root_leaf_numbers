/*
Question: Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

Link: https://leetcode.com/problems/sum-root-to-leaf-numbers/description/

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int res = 0;
    int sum = 0;
    
    public void sumNumbersUtil(TreeNode root){
        if(root == null)
            return;
        sum = sum*10 + root.val;
        if(root.left == null && root.right == null)
            res += sum;
        else{
            sumNumbersUtil(root.left);
            sumNumbersUtil(root.right);
        }
        sum /= 10;
    }
    public int sumNumbers(TreeNode root) {
        sumNumbersUtil(root);
        return res;
    }
}
